{% extends 'layout.njk' %}
{% block content %}
  {% block scripts %}
    <script defer>
      // Create an SVG container
      const svgContainer = createSvgContainer('100%', 800);
      svgContainer.classList.add('svg-container'); // Add the CSS class for the sway animation
      document.body.appendChild(svgContainer);

      function createSvgContainer(width, height) {
        const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
        svg.setAttribute('width', width);
        svg.setAttribute('height', height);
        return svg;
      }

      function createNodeGroup(id, cx, cy, r, text, parentCx, parentCy, hasChildren) {
        const group = document.createElementNS('http://www.w3.org/2000/svg', 'g');
        group.setAttribute('data-id', id);

        const linesGroup = createLinesGroup(cx, cy, r, parentCx, parentCy, hasChildren);
        group.appendChild(linesGroup);

        if (hasChildren) {
          const circle = createCircle(cx, cy, r);
          group.appendChild(circle);
        } else {
          const circle = createCircle(cx, cy, r, "#272A24", "transparent");
          group.appendChild(circle);
        }

        if (text !== undefined) {
          const textElement = createTextElement(cx, cy, text);
          group.appendChild(textElement);
        }

        return group;
      }

      function createLinesGroup(cx, cy, r, parentCx, parentCy, hasChildren) {
        const linesGroup = document.createElementNS('http://www.w3.org/2000/svg', 'g');

        if (parentCx !== undefined && parentCy !== undefined) {
          const line = createDottedLine(cx, cy, parentCx, parentCy, r);
          linesGroup.appendChild(line);
        }

        return linesGroup;
      }

      function createDottedLine(x1, y1, x2, y2, r) {
        const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
        const lineLength = 20;
        const angle = Math.atan2(y2 - y1, x2 - x1);
        const extendedParentCx = x1 + (r + lineLength) * Math.cos(angle);
        const extendedParentCy = y1 + (r + lineLength) * Math.sin(angle);

        line.setAttribute('x1', extendedParentCx);
        line.setAttribute('y1', extendedParentCy);
        line.setAttribute('x2', x2);
        line.setAttribute('y2', y2);
        line.setAttribute('stroke', '#ABB193');
        line.setAttribute('stroke-dasharray', '5,5');
        return line;
      }

    function createCircle(cx, cy, r, stroke = "#ABB193", fill = "#272A24") {
        const circle = document.createElementNS('http://www.w3.org/2000/svg', 'circle');
        circle.setAttribute('cx', cx);
        circle.setAttribute('cy', cy);
        circle.setAttribute('r', r);
        circle.setAttribute('stroke', stroke);
        circle.setAttribute('fill', fill);
        circle.classList.add('circle', 'expand-animation'); // Add the CSS class for the pulse and expand animations
        return circle;
    }

    function createTextElement(x, y, text) {
        const textElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        textElement.setAttribute('x', x);
        textElement.setAttribute('y', y);
        textElement.setAttribute('text-anchor', 'middle');
        textElement.setAttribute('fill', '#ABB193');
        textElement.textContent = text;

        // Set max-width style property to 50px
        textElement.style.maxWidth = '50px';
        textElement.style.overflow = 'hidden';
        textElement.style.textOverflow = 'ellipsis';

        return textElement;
    }

    function createTextElementWithLink(x, y, text, href) {
        const textElement = document.createElementNS('http://www.w3.org/2000/svg', 'text');
        textElement.setAttribute('x', x);
        textElement.setAttribute('y', y);
        textElement.setAttribute('text-anchor', 'middle');
        textElement.setAttribute('fill', '#ABB193');

        // Create an <a> tag
        const link = document.createElementNS('http://www.w3.org/2000/svg', 'a');
        link.setAttribute('href', href);
        link.setAttribute('target', '_blank'); // Set the target attribute as needed

        // Create a text node for the link
        const textNode = document.createTextNode(text);

        // Append the text node to the <a> tag
        link.appendChild(textNode);

        // Append the <a> tag to the <text> element
        textElement.appendChild(link);

        // Set max-width style property to 50px
        textElement.style.maxWidth = '50px';
        textElement.style.overflow = 'hidden';
        textElement.style.textOverflow = 'ellipsis';

        return textElement;
    }


    function generateSVGElements(node, cx, cy, radius, parentCx, parentCy) {
    if (node.children) {
        const angleStep = (Math.PI * 2) / node.children.length;
        node.children.forEach((child, index) => {
        const angle = index * angleStep;
        const childCx = cx + radius * Math.cos(angle) * 2;
        const childCy = cy + radius * Math.sin(angle) * 2;

        generateSVGElements(child, childCx, childCy, radius / 2, cx, cy);
        });
    }

    const hasChildren = node.children && node.children.length > 0;

    if (node.title) {
        const group = createNodeGroup(node.id, cx, cy, 50, node.title, parentCx, parentCy, hasChildren);
        svgContainer.appendChild(group);

        group.style.display = 'none';

        if (node.id === 'Overbrowsing') {
        group.style.display = 'block';
        }

        if (hasChildren) {
        group.addEventListener('click', (event) => {
            event.stopPropagation();
            toggle(node, group);
        });
        } else {
        // Check if it's a leaf node, and if yes, create a text element with a link
        const linkHref = 'https://example.com'; // Set the desired link href
        const textElement = createTextElementWithLink(cx, cy, node.title, linkHref);
        group.appendChild(textElement);
        }
    }
    }

      function toggle(node, element) {
        if (node.children) {
          node.children.forEach(child => {
            const childElement = svgContainer.querySelector(`g[data-id="${child.id}"]`);

            if (childElement) {
              const isDirectParent = element === svgContainer.querySelector(`g[data-id="${node.id}"]`);
              childElement.style.display = isDirectParent ? (childElement.style.display === 'block' ? 'none' : 'block') : 'none';

              if (isDirectParent && childElement.style.display === 'none') {
                turnOffDescendants(child);
              }
            }
          });
        }
      }

      function turnOffDescendants(node) {
        if (node.children) {
          node.children.forEach(child => {
            const childElement = svgContainer.querySelector(`g[data-id="${child.id}"]`);

            if (childElement) {
              childElement.style.display = 'none';
              turnOffDescendants(child);
            }
          });
        }
      }

      fetch('data/data.json')
        .then(res => res.json())
        .then(data => {
          const restructuredData = {
            id: 'Overbrowsing',
            title: 'Overbrowsing',
            children: [],
          };

          const groupedByCategory = {};

          data.forEach(categoryNode => {
            const category = categoryNode.category || 'Uncategorized';
            if (!groupedByCategory[category]) {
              groupedByCategory[category] = [];
            }
            groupedByCategory[category].push(categoryNode);
          });

          for (const [category, items] of Object.entries(groupedByCategory)) {
            const categoryNode = {
              id: category.replace(/\s+/g, '-'),
              title: category.replace(/\s+/g, '-'),
              children: [],
            };

            items.forEach(item => {
              if (item.contents) {
                const contentCategoryNode = {
                  id: item.title.replace(/\s+/g, '-'),
                  children: item.contents,
                };
                categoryNode.children.push(contentCategoryNode);
              } else {
                categoryNode.children.push(item);
              }
            });

            restructuredData.children.push(categoryNode);
          }

          generateSVGElements(restructuredData, 400, 400, 150);
        });
    </script>
  {% endblock %}
{% endblock %}
